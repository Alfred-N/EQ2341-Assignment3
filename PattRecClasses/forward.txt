def forward(self,logP):
        T = len(logP[0]) 
        N= len(logP) #num states
        
        alpha = np.zeros([T,N])
        
        alpha[0,:] = np.multiply(self.q,logP[0,:])
        print(alpha[0,:])
        
        for t in range(1,T):
            alpha_a_product = np.dot(self.A,alpha[t-1,:])
            b_kt = logP[t]
            alpha[t,:] = np.multiply(b_kt,alpha_a_product)
        
        return alpha